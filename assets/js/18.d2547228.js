(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{361:function(e,_,v){"use strict";v.r(_);var t=v(42),i=Object(t.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"未整理的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#未整理的"}},[e._v("#")]),e._v(" 未整理的")]),e._v(" "),v("h2",{attrs:{id:"_2020-10-28"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2020-10-28"}},[e._v("#")]),e._v(" 2020.10.28")]),e._v(" "),v("h3",{attrs:{id:"_1-session和jwt的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-session和jwt的区别"}},[e._v("#")]),e._v(" 1. session和JWT的区别")]),e._v(" "),v("ul",[v("li",[e._v("JSON Web Token（JWT）是一种开放标准（RFC 7519），它定义了一种紧凑且独立的方式，可以将各方之间的信息作为JSON对象进行安全传输。该信息可以验证和信任，因为是经过数字签名的。")]),e._v(" "),v("li",[e._v("JWT基本上由.分隔的三部分组成，分别是头部，有效载荷和签名。 "),v("code",[e._v("Header.Payload.Signature")])]),e._v(" "),v("li",[e._v("太多了不想整理了，以后弄吧，插个眼"),v("a",{attrs:{href:"https://juejin.im/post/6844903542449242126#heading-15",target:"_blank",rel:"noopener noreferrer"}},[e._v("聊一聊JWT与session"),v("OutboundLink")],1)])]),e._v(" "),v("h3",{attrs:{id:"_2-git"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-git"}},[e._v("#")]),e._v(" 2. git")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("git commit")]),e._v("：提交")]),e._v(" "),v("li",[v("code",[e._v("git branch")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("git branch <name>")]),e._v("：创建分支")]),e._v(" "),v("li",[v("code",[e._v("git branch -f <name> HEAD~<num>")]),e._v("：强制"),v("code",[e._v("name")]),e._v("分支指向"),v("code",[e._v("HEAD")]),e._v("的第"),v("code",[e._v("num")]),e._v("级父提交")])])]),e._v(" "),v("li",[v("code",[e._v("git checkout")]),e._v("：\n"),v("ul",[v("li",[v("code",[e._v("git checkout -b <name>")]),e._v("：创建新的分支，并且切换到新的分支上")]),e._v(" "),v("li",[v("code",[e._v("git checkout <branch-hash>")]),e._v("：指向具体的提交记录")]),e._v(" "),v("li",[v("code",[e._v("git checkout <name>")]),e._v("：切换到新的分支上\n"),v("ul",[v("li",[v("code",[e._v("<name>^")]),e._v("：向上移动 1 个提交记录")])])]),e._v(" "),v("li",[v("code",[e._v("git checkout HEAD~<num>")]),e._v("：向上移动"),v("code",[e._v("num")]),e._v("个提交记录")])])]),e._v(" "),v("li",[v("code",[e._v("git merge")]),e._v("：合并分支，新的提交记录会引用被合并的两个分支")]),e._v(" "),v("li",[v("code",[e._v("git rebase <name>")]),e._v("：线性合并分支，将当前分支合并到"),v("code",[e._v("name")]),e._v("分支下，但是新的提交记录并不引用旧的（当前的）记录")]),e._v(" "),v("li",[v("code",[e._v("git log")]),e._v("：查看提交记录的哈希值")]),e._v(" "),v("li",[v("code",[e._v("git reset HEAD~<num>")]),e._v("：撤销变更，把分支移回到向上"),v("code",[e._v("num")]),e._v("个提交记录，但是对多人共用的远程分支无效")]),e._v(" "),v("li",[v("code",[e._v("git revert HEAD")]),e._v("：撤销变更，并且分享给别人，但本质上是新增了一个节点，可能进行了回滚操作")]),e._v(" "),v("li",[v("code",[e._v("git cherry-pick <publish-id>")]),e._v("：复制多个提交记录到当前提交记录的下面（创建新的提交记录）")]),e._v(" "),v("li",[v("code",[e._v("git tag <tagname> <branch hash>")]),e._v("：给提交记录指定标签名，便于查找")]),e._v(" "),v("li",[v("code",[e._v("git describe <ref>")]),e._v("：找到最接近于"),v("code",[e._v("ref")]),e._v("的提交记录，"),v("code",[e._v("ref")]),e._v("可以是任何能被Git识别为提交记录的引用，默认为"),v("code",[e._v("HEAD")]),e._v("，即当前所检出的位置")]),e._v(" "),v("li",[v("code",[e._v("git fetch")]),e._v("：单纯的下载操作，并不会改变本地仓库的状态，也不会更新远程的分支")]),e._v(" "),v("li",[v("code",[e._v("git pull")]),e._v("：= "),v("code",[e._v("git fetch")]),e._v(" + "),v("code",[e._v("git merge")])])]),e._v(" "),v("p",[e._v("一种比较常见的场景：你的新代码准备push的时候，你的新代码是基于v1版本的，而现在仓库里的代码已经被别人更新为了v2版本，解决方案：")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("git fetch")]),e._v("：从远程拉取最新的v2代码，但是并不修改本地的代码")]),e._v(" "),v("li",[v("code",[e._v("git rebase o/master")]),e._v("：合并一下分支")]),e._v(" "),v("li",[v("code",[e._v("git push")]),e._v("：这个时候就可以提交了")])]),e._v(" "),v("h2",{attrs:{id:""}},[v("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])])])}),[],!1,null,null,null);_.default=i.exports}}]);